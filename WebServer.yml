AWSTemplateFormatVersion: "2010-09-09"
Description: "Infrastructure setup"

Parameters:
  Project:
    Type: "String"
    Default: "web"
  Environment:
    Type: "String"
    Default: "dev"
    AllowedValues:
      - "dev"
      - "prod"
  InstanceType:
    Description: "WebServer EC2 Instance type"
    Type: "String"
    Default: "t3.micro"
    AllowedValues:
      - "t3.micro"
      - "t3.small"
      - "t3.medium"
      - "t3.large"
  EC2VolumeSize:
    Description: "EC2 Volume size"
    Type: Number
    Default: 8
    MinValue: 8
  BastionEC2VolumeSize:
    Description: "Bastion EC2 Volume size"
    Type: Number
    Default: 8
    MinValue: 8
  KeyPair:
    Description: "The name of a EC2 KeyPair to enable SSH access to the instance"
    Type: "AWS::EC2::KeyPair::KeyName"
#  EC2ImageId:
#    Type: "AWS::EC2::Image::Id"
#    Default: "ami-06ad9296e6cf1e3cf"
#    AllowedPattern: "^ami-.+$"
#    Description: "The EC2 Image Id [required]"

Mappings:
  AWSInstanceType2Arch:
    t3.micro:
      Arch: "HVM64"
    t3.small:
      Arch: "HVM64"
    t3.medium:
      Arch: "HVM64"
  AWSInstanceType2NATArch:
    t3.micro:
      Arch: "NATHVM64"
    t3.small:
      Arch: "NATHVM64"
    t3.medium:
      Arch: "NATHVM64"
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: "ami-0080e4c5bc078760e"
      HVMG2: "ami-0aeb704d503081ea6"
    us-east-2:
      HVM64: "ami-0cd3dfa4e37921605"
      HVMG2: "NOT_SUPPORTED"
    ap-northeast-1:
      HVM64: "ami-06ad9296e6cf1e3cf"
      HVMG2: "ami-09d0e0e099ecabba2"
    ap-northeast-2:
      HVM64: "ami-00dc207f8ba6dc919"
      HVMG2: "NOT_SUPPORTED"
    ap-northeast-3:
      HVM64: "ami-0b65f69a5c11f3522"
      HVMG2: "NOT_SUPPORTED"

Resources:
  WebSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security Group for EC2 Instance"
      GroupName: !Sub "${Project}-${Environment}-web-sg"
      VpcId:
        Fn::ImportValue: !Sub "${Project}-${Environment}-vpc-id"
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${Environment}-web-sg"

  WebSGIngressSSH:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt "WebSecurityGroup.GroupId"
      CidrIp:
        Fn::ImportValue: !Sub "${Project}-${Environment}-vpc-cidr"
      IpProtocol: "tcp"
      FromPort: 22
      ToPort: 22

  WebSGIngressHttp:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt "WebSecurityGroup.GroupId"
      CidrIp:
        Fn::ImportValue: !Sub "${Project}-${Environment}-vpc-cidr"
      IpProtocol: "tcp"
      FromPort: 80
      ToPort: 80

  WebSGIngressHttps:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt "WebSecurityGroup.GroupId"
      CidrIp:
        Fn::ImportValue: !Sub "${Project}-${Environment}-vpc-cidr"
      IpProtocol: "tcp"
      FromPort: 443
      ToPort: 443

  # Disable the default egress for sg
  WebSGEgressDeny:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt "WebSecurityGroup.GroupId"
      CidrIp: "172.0.0.1/32"
      IpProtocol: "-1"

  WebSGEgressHttp:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt "WebSecurityGroup.GroupId"
      CidrIp: "0.0.0.0/0"
      IpProtocol: "tcp"
      FromPort: 80
      ToPort: 80

  WebSGEgressHttps:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt "WebSecurityGroup.GroupId"
      CidrIp: "0.0.0.0/0"
      IpProtocol: "tcp"
      FromPort: 443
      ToPort: 443


  # Bastion Security Group
  BastionSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security Group for Bastion"
      GroupName: !Sub "${Project}-${Environment}-bastion-sg"
      VpcId:
        Fn::ImportValue: !Sub "${Project}-${Environment}-vpc-id"
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${Environment}-bastion-sg"

  BastionSGIngressSSH:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt "BastionSecurityGroup.GroupId"
      CidrIp:
        Fn::ImportValue: "access-cidr-block"
      IpProtocol: "tcp"
      FromPort: 22
      ToPort: 22

  BastionSGIngressHttp:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt "BastionSecurityGroup.GroupId"
      CidrIp:
        Fn::ImportValue: "access-cidr-block"
      IpProtocol: "tcp"
      FromPort: 80
      ToPort: 80

  BastionSGIngressHttps:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt "BastionSecurityGroup.GroupId"
      CidrIp:
        Fn::ImportValue: "access-cidr-block"
      IpProtocol: "tcp"
      FromPort: 443
      ToPort: 443

  # Disable the default egress for sg
  BastionSGEgressDeny:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt "BastionSecurityGroup.GroupId"
      CidrIp: "172.0.0.1/32"
      IpProtocol: "-1"

  BastionSGEgressSSH:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt "BastionSecurityGroup.GroupId"
      CidrIp:
        Fn::ImportValue: !Sub "${Project}-${Environment}-vpc-cidr"
      IpProtocol: "tcp"
      FromPort: 22
      ToPort: 22

  BastionSGEgressHttp:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt "BastionSecurityGroup.GroupId"
      CidrIp:
        Fn::ImportValue: !Sub "${Project}-${Environment}-vpc-cidr"
      IpProtocol: "tcp"
      FromPort: 80
      ToPort: 80

  BastionSGEgressHttps:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt "BastionSecurityGroup.GroupId"
      CidrIp:
        Fn::ImportValue: !Sub "${Project}-${Environment}-vpc-cidr"
      IpProtocol: "tcp"
      FromPort: 443
      ToPort: 443

  WebInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap
        - "AWSRegionArch2AMI"
        - !Ref "AWS::Region"
        - !FindInMap
          - "AWSInstanceType2Arch"
          - !Ref "InstanceType"
          - "Arch"
      IamInstanceProfile: !Sub "${Project}-${Environment}-ec2-iam-profile"
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: !Ref "EC2VolumeSize"
            VolumeType: gp2
      SubnetId:
        Fn::ImportValue: !Sub "${Project}-${Environment}-prv-subnet-1-id"
      EbsOptimized: true
      InstanceType: !Ref "InstanceType"
      Monitoring: true
      SecurityGroupIds: [ !Ref "WebSecurityGroup" ]
#      DisableApiTermination: true
      KeyName: !Ref "KeyPair"
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${Environment}-web"

  # VPC Flow Log
  VPCFlowLog:
    Type: "AWS::EC2::FlowLog"
    Properties:
      DeliverLogsPermissionArn:
        Fn::ImportValue: !Sub "${Project}-${Environment}-vpc-flow-log-role-arn"
      LogDestinationType: "cloud-watch-logs"
      LogGroupName: !Ref "CloudWatchLogsGroupForVPCFlowLog"
      ResourceId:
        Fn::ImportValue: !Sub "${Project}-${Environment}-vpc-id"
      ResourceType: "VPC"
      TrafficType: "ALL"

  CloudWatchLogsGroupForVPCFlowLog:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "${Project}-${Environment}-vpc-flowlogs"
      RetentionInDays: 14

  BastionInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap
        - "AWSRegionArch2AMI"
        - !Ref "AWS::Region"
        - !FindInMap
          - "AWSInstanceType2Arch"
          - !Ref "InstanceType"
          - "Arch"
      IamInstanceProfile:
        Fn::ImportValue: !Sub "${Project}-${Environment}-ec2-iam-profile"
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: !Ref "BastionEC2VolumeSize"
            VolumeType: "gp2"
      EbsOptimized: true
      InstanceType: !Ref "InstanceType"
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId:
            Fn::ImportValue: !Sub "${Project}-${Environment}-pub-subnet-1-id"
          GroupSet:
            - !Ref "BastionSecurityGroup"
      Monitoring: true
#      DisableApiTermination: true
      KeyName: !Ref "KeyPair"
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${Environment}-bastion"


Outputs:
  WebSG:
    Value: !Ref "BastionSecurityGroup"
    Export:
      Name: "web-sg"

  BastionSG:
    Value: !Ref "BastionSecurityGroup"
    Export:
      Name: "bastion-sg"

