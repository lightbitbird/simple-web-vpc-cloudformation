AWSTemplateFormatVersion: "2010-09-09"
Description: "Infrastructure setup"

Parameters:
  Project:
    Type: "String"
    Default: "web"
  Environment:
    Type: "String"
    Default: "dev"
    AllowedValues:
      - "dev"
      - "prod"


Mappings:
  Subnets:
    VpcSubnet:
      Ipv4Cidr1stOctet: "172"
      Ipv4Cidr2ndOctet: "12"
      Ipv4Cidr: "16"
    PublicSubnetOne:
      Ipv4Cidr3rdOctet: "0"
    PublicSubnetTwo:
      Ipv4Cidr3rdOctet: "1"
    PublicSubnetThree:
      Ipv4Cidr3rdOctet: "2"
    PrivateSubnetOne:
      Ipv4Cidr3rdOctet: "16"
    PrivateSubnetTwo:
      Ipv4Cidr3rdOctet: "17"
    PrivateSubnetThree:
      Ipv4Cidr3rdOctet: "18"
    EnabledAccessCidrBlock:
      Ipv4CidrBlock: "0.0.0.0/0"
  Regions:
    ap-northeast-1:
      RegionName: "Tokyo Region"
    us-east-1:
      RegionName: "Virginia Region"


Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Sub
        - "${1stOctet}.${2ndOctet}.0.0/${Ipv4Cidr}"
        - 1stOctet: !FindInMap [ "Subnets", "VpcSubnet", "Ipv4Cidr1stOctet" ]
          2ndOctet: !FindInMap [ "Subnets", "VpcSubnet", "Ipv4Cidr2ndOctet"]
          Ipv4Cidr: !FindInMap [ "Subnets", "VpcSubnet", "Ipv4Cidr"]
      InstanceTenancy: "default"
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${Environment}-vpc"


  # public Subnets ------------------------
  PublicSubnetOne:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
          - 0
          - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref "VPC"
      CidrBlock: !Sub
        - "${1stOctet}.${2ndOctet}.${3rdOctet}.0/24"
        - 1stOctet: !FindInMap [ "Subnets", "VpcSubnet", "Ipv4Cidr1stOctet" ]
          2ndOctet: !FindInMap [ "Subnets", "VpcSubnet", "Ipv4Cidr2ndOctet"]
          3rdOctet: !FindInMap [ "Subnets", "PublicSubnetOne", "Ipv4Cidr3rdOctet"]
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${Environment}-pub-1"

  PublicSubnetTwo:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref "VPC"
      CidrBlock: !Sub
        - "${1stOctet}.${2ndOctet}.${3rdOctet}.0/24"
        - 1stOctet: !FindInMap [ "Subnets", "VpcSubnet", "Ipv4Cidr1stOctet" ]
          2ndOctet: !FindInMap [ "Subnets", "VpcSubnet", "Ipv4Cidr2ndOctet"]
          3rdOctet: !FindInMap [ "Subnets", "PublicSubnetTwo", "Ipv4Cidr3rdOctet"]
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${Environment}-pub-2"

  PublicSubnetThree:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 2
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref "VPC"
      CidrBlock: !Sub
        - "${1stOctet}.${2ndOctet}.${3rdOctet}.0/24"
        - 1stOctet: !FindInMap [ "Subnets", "VpcSubnet", "Ipv4Cidr1stOctet" ]
          2ndOctet: !FindInMap [ "Subnets", "VpcSubnet", "Ipv4Cidr2ndOctet"]
          3rdOctet: !FindInMap [ "Subnets", "PublicSubnetThree", "Ipv4Cidr3rdOctet"]
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${Environment}-pub-3"

  # public Subnets ------------------------


  # Route Tables for public Subnets ------------------------
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${Environment}-pub-rtb"

  PublicSubnetOneRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref "PublicRouteTable"
      SubnetId: !Ref "PublicSubnetOne"

  PublicSubnetTwoRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref "PublicRouteTable"
      SubnetId: !Ref "PublicSubnetTwo"

  PublicSubnetThreeRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref "PublicRouteTable"
      SubnetId: !Ref "PublicSubnetThree"

  # Route Tables for public Subnets ------------------------


  # Private Subnets ------------------------
  PrivateSubnetOne:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref "VPC"
      CidrBlock: !Sub
        - "${1stOctet}.${2ndOctet}.${3rdOctet}.0/24"
        - 1stOctet: !FindInMap [ "Subnets", "VpcSubnet", "Ipv4Cidr1stOctet" ]
          2ndOctet: !FindInMap [ "Subnets", "VpcSubnet", "Ipv4Cidr2ndOctet"]
          3rdOctet: !FindInMap [ "Subnets", "PrivateSubnetOne", "Ipv4Cidr3rdOctet"]
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${Environment}-prv-1"

  PrivateSubnetTwo:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref "VPC"
      CidrBlock: !Sub
        - "${1stOctet}.${2ndOctet}.${3rdOctet}.0/24"
        - 1stOctet: !FindInMap [ "Subnets", "VpcSubnet", "Ipv4Cidr1stOctet" ]
          2ndOctet: !FindInMap [ "Subnets", "VpcSubnet", "Ipv4Cidr2ndOctet"]
          3rdOctet: !FindInMap [ "Subnets", "PrivateSubnetTwo", "Ipv4Cidr3rdOctet"]
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${Environment}-prv-2"

  PrivateSubnetThree:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref "VPC"
      CidrBlock: !Sub
        - "${1stOctet}.${2ndOctet}.${3rdOctet}.0/24"
        - 1stOctet: !FindInMap [ "Subnets", "VpcSubnet", "Ipv4Cidr1stOctet" ]
          2ndOctet: !FindInMap [ "Subnets", "VpcSubnet", "Ipv4Cidr2ndOctet"]
          3rdOctet: !FindInMap [ "Subnets", "PrivateSubnetThree", "Ipv4Cidr3rdOctet"]
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${Environment}-prv-3"

  # Private Subnets ------------------------


  # Route Tables for Private Subnets ------------------------
  PrivateRouteTableOne:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${Environment}-prv-rtb"

  PrivateRouteTableTwo:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${Environment}-prv-rtb"

  PrivateRouteTableThree:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${Environment}-prv-rtb"

  PrivateSubnetOneRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref "PrivateRouteTableOne"
      SubnetId: !Ref "PrivateSubnetOne"

  PrivateSubnetTwoRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref "PrivateRouteTableTwo"
      SubnetId: !Ref "PrivateSubnetTwo"

  PrivateSubnetThreeRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref "PrivateRouteTableThree"
      SubnetId: !Ref "PrivateSubnetThree"


  VPCInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${Environment}-igw"

  IgwAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref "VPC"
      InternetGatewayId: !Ref "VPCInternetGateway"

  PublicRouteToInternet:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref "VPCInternetGateway"

  # Route Tables for Private Subnets ------------------------


  # NatGateway AND EIP -------------------------------
  NatGatewayEIPOne:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  NatGatewayOne:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt "NatGatewayEIPOne.AllocationId"
      SubnetId: !Ref "PublicSubnetOne"
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${Environment}-ntgw-1"

  PrivateRouteToNatGatewayOne:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref "PrivateRouteTableOne"
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref "NatGatewayOne"

  NatGatewayEIPTwo:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  NatGatewayTwo:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt "NatGatewayEIPTwo.AllocationId"
      SubnetId: !Ref "PublicSubnetTwo"
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${Environment}-ntgw-2"

  PrivateRouteToNatGatewayTwo:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref "PrivateRouteTableTwo"
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref "NatGatewayTwo"

  NatGatewayEIPThree:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  NatGatewayThree:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt "NatGatewayEIPThree.AllocationId"
      SubnetId: !Ref "PublicSubnetTwo"
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${Environment}-ntgw-3"

  PrivateRouteToNatGatewayThree:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref "PrivateRouteTableThree"
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref "NatGatewayThree"
  # NatGateway AND EIP -------------------------------

  # VPC Flow Log for S3
  VPCFlowLogForS3:
    Type: "AWS::EC2::FlowLog"
    Properties:
      LogDestinationType: "s3"
      LogDestination:
        Fn::ImportValue: !Sub "${Project}-${Environment}-vpc-flow-logs-bucket-arn"
      ResourceId: !Ref "VPC"
      ResourceType: "VPC"
      TrafficType: "ALL"

  # VPC Flow Log for CloudWatchLogs
#  VPCFlowLogForCLoudWatchLogs:
#    Type: "AWS::EC2::FlowLog"
#    Properties:
#      # Set this for CloudWatchLogs
#      DeliverLogsPermissionArn:
#        Fn::ImportValue: !Sub "${Project}-${Environment}-vpc-flow-logs-role-arn"
#      LogDestinationType: "cloud-watch-logs"
#      LogDestination:
#        Fn::ImportValue: !Sub "${Project}-${Environment}-vpc-flow-logs-bucket-arn"
#      LogGroupName: !Ref "CloudWatchLogsGroupForVPCFlowLog"
#      ResourceId: !Ref "VPC"
#      ResourceType: "VPC"
#      TrafficType: "ALL"
#
#  CloudWatchLogsGroupForVPCFlowLog:
#    Type: "AWS::Logs::LogGroup"
#    Properties:
#      LogGroupName: !Sub "${Project}-${Environment}-vpc-flow-logs"
#      RetentionInDays: 14

  # Security Group for VPC ------------------------
  VPCSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security Group for VPC"
      GroupName: !Sub "${Project}-${Environment}-vpc-sg"
      VpcId: !Ref "VPC"
      Tags:
        - Key: "Name"
          Value: !Sub "${Project}-${Environment}-vpc-sg"

  VPCSecurityGroupEgress:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt "VPCSecurityGroup.GroupId"
      CidrIp: "127.0.0.1/32"
      IpProtocol: "-1"
  # Security Group for VPC ------------------------

Outputs:
  VpcId:
    Value: !Ref "VPC"
    Export:
      Name: !Sub "${Project}-${Environment}-vpc-id"

  VpcCidrBlock:
    Value: !GetAtt "VPC.CidrBlock"
    Export:
      Name: !Sub "${Project}-${Environment}-vpc-cidr"

  PublicSubnetOneId:
    Value: !Ref "PublicSubnetOne"
    Export:
      Name: !Sub "${Project}-${Environment}-pub-subnet-1-id"

  PublicSubnetTwoId:
    Value: !Ref "PublicSubnetTwo"
    Export:
      Name: !Sub "${Project}-${Environment}-pub-subnet-2-id"

  PublicSubnetThreeId:
    Value: !Ref "PublicSubnetThree"
    Export:
      Name: !Sub "${Project}-${Environment}-pub-subnet-3-id"

  PrivsteSubnetOneId:
    Value: !Ref "PrivateSubnetOne"
    Export:
      Name: !Sub "${Project}-${Environment}-prv-subnet-1-id"

  PrivateSubnetTwoId:
    Value: !Ref "PrivateSubnetTwo"
    Export:
      Name: !Sub "${Project}-${Environment}-prv-subnet-2-id"

  PrivateSubnetThreeId:
    Value: !Ref "PrivateSubnetThree"
    Export:
      Name: !Sub "${Project}-${Environment}-prv-subnet-3-id"

  EnabledAccessCidrBlock:
    Value: !FindInMap [ "Subnets",  "EnabledAccessCidrBlock", "Ipv4CidrBlock"]
    Export:
      Name: "access-cidr-block"

  VPCSecurityGroupName:
    Value: !Ref "VPCSecurityGroup"
    Export:
      Name: !Sub "${Project}-${Environment}-vpc-sg"
